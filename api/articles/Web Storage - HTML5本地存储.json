{"title":"Web Storage - HTML5本地存储","uid":"6c8c7b5d1ee2282dcd4144a2e2072c08","slug":"Web Storage - HTML5本地存储","date":"2019-06-06T02:11:34.000Z","updated":"2021-05-14T10:42:52.000Z","comments":true,"path":"api/articles/Web Storage - HTML5本地存储.json","keywords":null,"cover":"/assets/web-storage.jpg","content":"<p>Web Storage 是 HTML5 引入的一个非常重要的功能，在前端开发中经常用到，可以在客户端本地存储数据，类似 HTML4 的 cookie，但可实现功能要比 cookie 强大的多，cookie 大小被限制在 4KB，Web Storage 官方建议为每个网站 5MB。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Web-Storage-其相对于-cookie-来说有以下几点优势：\"><a href=\"#Web-Storage-其相对于-cookie-来说有以下几点优势：\" class=\"headerlink\" title=\"Web Storage 其相对于 cookie 来说有以下几点优势：\"></a>Web Storage 其相对于 cookie 来说有以下几点优势：</h3><ul>\n<li>存储空间大：cookie 只有 4KB 的存储空间，而 Web Storage 在官方建议中为每个网站 5M。</li>\n<li>可选择性强：Web Storage 分为两种：sessionStorage 和 localStorage</li>\n</ul>\n<h3 id=\"Web-Storage-的使用方法\"><a href=\"#Web-Storage-的使用方法\" class=\"headerlink\" title=\"Web Storage 的使用方法\"></a>Web Storage 的使用方法</h3><p>在使用上，session Storage 和 local Storage 大同小异，只是 session Storage 是将数据临时存储在 session 中，浏览器关闭，数据随之消失。而 local Storage 则是将数据存储在本地，理论上来说数据永远不会消失，除非人为删除。</p>\n<h3 id=\"API：\"><a href=\"#API：\" class=\"headerlink\" title=\"API：\"></a>API：</h3><ol>\n<li>保存数据 localStorage.setItem(key, value); sessionStorage.setItem(key, value);</li>\n<li>读取数据 localStorage.getItem(key); sessionStorage.getItem( key );</li>\n<li>删除单个数据 localStorage.removeItem(key); sessionStorage.removeItem(key);</li>\n<li>删除全部数据 localStorage.clear(); sessionStorage.clear();</li>\n<li>获取索引的 keylocalStorage.key(index); sessionStorage.key(index);</li>\n</ol>\n<p><em><strong>注意：Web Storage 的 API 只能操作字符串</strong></em></p>\n<hr>\n<p>在使用 Web Storage 之前，我们需要注意以下几点：</p>\n<ol>\n<li>仅支持支持 IE8 及以上版本</li>\n<li>由于只能对字符串类型数据进行操作，所以对一些 JSON 对象需要进行转换</li>\n<li>因为是明文存储，所以毫无隐私性可言，绝对不能用于存储重要信息</li>\n<li>会是浏览器加载速度在一定程度上变慢</li>\n<li>无法被爬虫程序爬取</li>\n</ol>\n<p>使用 Web Storage 之前，请加上以下代码，对浏览器对 Web Storage 的支持性进行判断:</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">if (window.localStorage) &#123;\n  &#x2F;&#x2F;或者 window.sessionStorage\n  alert(&#39;浏览支持localStorage&#39;)\n&#125; else &#123;\n  alert(&#39;浏览暂不支持localStorage&#39;)\n&#125;\n\n&#x2F;&#x2F;或者\nif (typeof window.localStorage &#x3D;&#x3D; &#39;undefined&#39;) &#123;\n  &#x2F;&#x2F;或者 window.sessionStorage\n  alert(&#39;浏览暂不支持localStorage&#39;)\n&#125;</code></pre>\n\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>以 localStorage 为例，sessionStorage 用法一样：</p>\n<h3 id=\"setItem\"><a href=\"#setItem\" class=\"headerlink\" title=\"setItem\"></a>setItem</h3><p>保存数据：localStorage.setItem(key,value);</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;示例：\nlocalStorage.setItem(&#39;name&#39;, &#39;Hello World&#39;)</code></pre>\n\n<p><em><strong>当 key 相同时会覆盖之前的 value，用于修改数据。如果 value 为对象，需转为 json 字符串，否则你读取出来的将会是 [object Object]</strong></em></p>\n<h3 id=\"getItem\"><a href=\"#getItem\" class=\"headerlink\" title=\"getItem\"></a>getItem</h3><p>读取数据：localStorage.getItem(key);</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;示例：\nlocalStorage.getItem(&#39;name&#39;) &#x2F;&#x2F; Hello World</code></pre>\n\n<h3 id=\"removeItem\"><a href=\"#removeItem\" class=\"headerlink\" title=\"removeItem\"></a>removeItem</h3><p>删除单个数据：localStorage.removeItem(key);</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;示例：\nlocalStorage.removeItem(&#39;name&#39;)\nlocalStorage.getItem(&#39;name&#39;) &#x2F;&#x2F; null</code></pre>\n\n<p><em><strong>删除 key 为 name 的数据后，loaclStorage 里已经获取不到该数据，则返回 null。</strong></em></p>\n<h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h3><p>删除所有数据：localStorage.clear();</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;示例：\nlocalStorage.clear()</code></pre>\n\n<p><em><strong>此时会把 localStorage 中的所有数据都删除。</strong></em></p>\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>得到某个索引的 key：localStorage.key(index);</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;示例：\nlocalStorage.setItem(&#39;name1&#39;, &#39;Hello World&#39;)\nlocalStorage.setItem(&#39;name2&#39;, &#39;Hello Linxin&#39;)\nlocalStorage.key(1) &#x2F;&#x2F; name2</code></pre>\n\n<p><em><strong>获取到索引为 1 的 key，即 name2。</strong></em></p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>在实际项目中，可能需要多次对 localStorage 进行操作，我们可以通过一个构造函数来更好的操作。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F;示例：\nvar localEvent &#x3D; function (item) &#123;\n  this.get &#x3D; function () &#123;\n    return localStorage.getItem(item)\n  &#125;\n  this.set &#x3D; function (val) &#123;\n    localStorage.setItem(item, val)\n  &#125;\n  this.remove &#x3D; function () &#123;\n    localStorage.removeItem(item)\n  &#125;\n  this.clear &#x3D; function () &#123;\n    localStorage.clear()\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 使用new字符把构造函数实例化出多个对象\nvar local1 &#x3D; new localEvent(&#39;name1&#39;)\nvar local2 &#x3D; new localEvent(&#39;name2&#39;)\n\nlocal1.set(&#39;Hello World&#39;)\nlocal2.set(&#39;Hello Linxin&#39;)\n\nlocal1.get() &#x2F;&#x2F; Hello World\nlocal2.get() &#x2F;&#x2F; Hello Linxin</code></pre>\n\n<p>这里只是简单的演示，像我们平时在项目中可能要把对象存储起来，就需要在代码里做些处理。</p>\n<h3 id=\"监听-storage-事件\"><a href=\"#监听-storage-事件\" class=\"headerlink\" title=\"监听 storage 事件\"></a>监听 storage 事件</h3><p>可以通过监听 window 对象的 storage 事件并指定其事件处理函数，当页面中对 localStorage 或 sessionStorage 进行修改时，则会触发对应的处理函数。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">window.addEventListener(&#39;storage&#39;, function (e) &#123;\n  console.log(&#39;key&#x3D;&#39; + e.key + &#39;,oldValue&#x3D;&#39; + e.oldValue + &#39;,newValue&#x3D;&#39; + e.newValue)\n&#125;)</code></pre>\n\n<p>触发事件的时间对象（e 参数值）有几个属性：</p>\n<ul>\n<li>key : 键值。</li>\n<li>oldValue : 被修改前的值。</li>\n<li>newValue : 被修改后的值。</li>\n<li>url : 页面 url。</li>\n<li>storageArea : 被修改的 storage 对象。</li>\n</ul>\n<p><em><strong>注意：在谷歌浏览器中，需要在不同标签页中修改 storage 才会触发该事件，即 网页 A 监听该事件，在 网页 B 中修改 localStorage，则 网页 A 会触发事件函数。但是在 IE 中，在同个网页修改 localStorage 都会触发该事件。</strong></em></p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>谷歌浏览器自带调试工具(chrome devtools)非常好用，可以用来调试 localStorage 和 sessionStorage。打开浏览器按 f12 调出调试工具，可以看到 Application ，点击打开可以看到左边栏有 Storage，包括了 localStorage、sessionStorage、IndexedDB 等，选中我们要调试的网站域名，可以看到右边有对应的 key 和 value，可以通过右键进行编辑或删除等。</p>\n","text":"Web Storage 是 HTML5 引入的一个非常重要的功能，在前端开发中经常用到，可以在客户端本地存储数据，类似 HTML4 的 cookie，但可实现功能要比 cookie 强大的多，cookie 大小被限制在 4KB，Web Storage 官方建议为每个网站 5MB。...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Web Storage","slug":"Web-Storage","count":1,"path":"api/categories/Web-Storage.json"}],"tags":[{"name":"Web Storage","slug":"Web-Storage","count":1,"path":"api/tags/Web-Storage.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web-Storage-%E5%85%B6%E7%9B%B8%E5%AF%B9%E4%BA%8E-cookie-%E6%9D%A5%E8%AF%B4%E6%9C%89%E4%BB%A5%E4%B8%8B%E5%87%A0%E7%82%B9%E4%BC%98%E5%8A%BF%EF%BC%9A\"><span class=\"toc-text\">Web Storage 其相对于 cookie 来说有以下几点优势：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Web-Storage-%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">Web Storage 的使用方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#API%EF%BC%9A\"><span class=\"toc-text\">API：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setItem\"><span class=\"toc-text\">setItem</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#getItem\"><span class=\"toc-text\">getItem</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#removeItem\"><span class=\"toc-text\">removeItem</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#clear\"><span class=\"toc-text\">clear</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#key\"><span class=\"toc-text\">key</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC-storage-%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">监听 storage 事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">调试</span></a></li></ol>","author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"详解JS遍历","uid":"9f17109abe732a77d87a2b0d4189145c","slug":"详解JS遍历","date":"2019-07-20T14:19:44.000Z","updated":"2021-05-14T10:40:30.000Z","comments":true,"path":"api/articles/详解JS遍历.json","keywords":null,"cover":"/assets/js.jpg","text":"遍历数组或对象是一名程序员的基本素养之一，然而遍历却不是一件简单的事，优秀的程序员知道怎么去选择合适的遍历方法，优化遍历效率。本篇将带你走进 JavaScript 遍历的世界，享受分析 JS 循环的快感。本篇所有代码都可以直接运行，希望您通读本篇后，不止是浏览， 最好是亲手去实践...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"JS","slug":"JS","count":4,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":3,"path":"api/tags/JS.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"常用的javaScript正则表达式","uid":"bfff9943662c3aacf871abc5e37a1cbd","slug":"常用的JS正则表达式","date":"2019-05-27T11:30:16.000Z","updated":"2021-05-14T10:44:10.000Z","comments":true,"path":"api/articles/常用的JS正则表达式.json","keywords":null,"cover":"/assets/regex.jpg","text":"常用的 javaScript 正则表达式 常用的 javaScript 正则表达式，其中包括用户名、密码强度、电子邮件地址（Email）、手机号码、身份证号、URL 地址、 IPv4 地址、 十六进制颜色、 日期、 整数、数字、QQ 号码、 微信号、车牌号、中文正则。 用户名正则...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Regex","slug":"Regex","count":1,"path":"api/categories/Regex.json"}],"tags":[{"name":"Regex","slug":"Regex","count":1,"path":"api/tags/Regex.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}