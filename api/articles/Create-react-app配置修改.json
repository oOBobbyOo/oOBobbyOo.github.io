{"title":"Create-react-app配置修改","uid":"0fbeba53686d7519956c365134c50018","slug":"Create-react-app配置修改","date":"2021-03-10T13:22:45.000Z","updated":"2021-05-30T08:24:26.672Z","comments":true,"path":"api/articles/Create-react-app配置修改.json","keywords":null,"cover":"/assets/react.jpg","content":"<p>在创建 react 项目时，我们一般用 create-react-app 脚手架来搭建项目，create-react-app 对 webpack 的配置进行了封装并默认隐藏了配置文件，当我们需要对 webpack 的配置进行扩展时，需要执行 npm run eject 命令将配置文件暴露出来，然后在对配置文件进行扩展。</p>\n<p>这种方式的缺点：</p>\n<ul>\n<li>npm run eject 命名不可逆，一旦配置文件暴露后就不可再隐藏</li>\n<li>扩展的配置和 create-react-app 内建的 webpack 配置混合在了一起，不利于配置出现问题后的排查</li>\n</ul>\n<h1 id=\"一、使用-react-app-rewired-customize-cra-组合覆盖配置\"><a href=\"#一、使用-react-app-rewired-customize-cra-组合覆盖配置\" class=\"headerlink\" title=\"一、使用 react-app-rewired + customize-cra 组合覆盖配置\"></a>一、使用 react-app-rewired + customize-cra 组合覆盖配置</h1><h2 id=\"1、安装-react-app-rewired、customize-cra\"><a href=\"#1、安装-react-app-rewired、customize-cra\" class=\"headerlink\" title=\"1、安装 react-app-rewired、customize-cra\"></a>1、安装 react-app-rewired、customize-cra</h2><p>customize-cra: <a href=\"https://github.com/arackaf/customize-cra\">https://github.com/arackaf/customize-cra</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn add react-app-rewired customize-cra -D</code></pre>\n\n<h2 id=\"2、修改-package-json-文件\"><a href=\"#2、修改-package-json-文件\" class=\"headerlink\" title=\"2、修改 package.json 文件\"></a>2、修改 package.json 文件</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; react-scripts包替换为react-app-rewired\n\n&quot;scripts&quot;: &#123;\n  &quot;start&quot;: &quot;react-app-rewired start&quot;,\n  &quot;build&quot;: &quot;react-app-rewired build&quot;,\n  &quot;test&quot;: &quot;react-app-rewired test&quot;,\n  &quot;eject&quot;: &quot;react-app-rewired eject&quot;\n&#125;</code></pre>\n\n<h2 id=\"3、在项目根目录新建-config-overrides-js\"><a href=\"#3、在项目根目录新建-config-overrides-js\" class=\"headerlink\" title=\"3、在项目根目录新建 config-overrides.js\"></a>3、在项目根目录新建 config-overrides.js</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; override &#125; &#x3D; require(&#39;customize-cra&#39;);\nmodule.exports &#x3D; override((config, env) &#x3D;&gt; &#123;\n  return config\n&#125;);</code></pre>\n\n<h2 id=\"4、添加路径别名，设置相对路径\"><a href=\"#4、添加路径别名，设置相对路径\" class=\"headerlink\" title=\"4、添加路径别名，设置相对路径\"></a>4、添加路径别名，设置相对路径</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">const path &#x3D; require(&#39;path&#39;);\nconst &#123; override, addWebpackAlias&#125; &#x3D; require(&#39;customize-cra&#39;);\n\nmodule.exports &#x3D; override(\n  addWebpackAlias(&#123;\n    &#39;@&#39;: path.resolve(__dirname, &#39;src&#39;),\n    &#39;@a&#39;: path.resolve(__dirname, &#39;src&#x2F;assets&#39;),\n    &#39;@c&#39;: path.resolve(__dirname, &#39;src&#x2F;components&#39;),\n  &#125;),\n)</code></pre>\n\n<h2 id=\"5、antd-design-按需加载\"><a href=\"#5、antd-design-按需加载\" class=\"headerlink\" title=\"5、antd-design 按需加载\"></a>5、antd-design 按需加载</h2><p>1、yarn add babel-plugin-import -D<br>2、yarn add antd</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; override, fixBabelImports &#125; &#x3D; require(&#39;customize-cra&#39;);\n\nmodule.exports &#x3D; override(\n  fixBabelImports(&#39;import&#39;, &#123;\n    libraryName: &#39;antd&#39;,\n    libraryDirectory: &#39;es&#39;,\n    style: true,\n  &#125;),\n);</code></pre>\n\n<h2 id=\"6、配置-less\"><a href=\"#6、配置-less\" class=\"headerlink\" title=\"6、配置 less\"></a>6、配置 less</h2><p>1、yarn add less less-loader -D</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; override, addLessLoader &#125; &#x3D; require(&#39;customize-cra&#39;);\n\nmodule.exports &#x3D; override(\n  addLessLoader(&#123;\n    lessOptions: &#123;\n      javascriptEnabled: true,\n      modifyVars: &#123; &#39;@primary-color&#39;: &#39;#1DA57A&#39; &#125;,\n      localIdentName: &#39;[local]--[hash:base64:5]&#39;, &#x2F;&#x2F; 自定义 CSS Modules 的 localIdentName\n    &#125;\n  &#125;),\n);</code></pre>\n\n<h2 id=\"7、使用装饰器\"><a href=\"#7、使用装饰器\" class=\"headerlink\" title=\"7、使用装饰器\"></a>7、使用装饰器</h2><p>1、yarn add -D @babel/plugin-proposal-decorators</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; override, addDecoratorsLegacy&#125; &#x3D; require(&#39;customize-cra&#39;)\n\nmodule.exports &#x3D; override(\n  &#x2F;&#x2F; enable legacy decorators babel plugin\n  addDecoratorsLegacy(),\n)</code></pre>\n\n<h2 id=\"8、移动端适配\"><a href=\"#8、移动端适配\" class=\"headerlink\" title=\"8、移动端适配\"></a>8、移动端适配</h2><p>1、yarn add lib-flexible postcss-px2rem</p>\n<p>lib-flexible: <a href=\"https://github.com/amfe/lib-flexible\">https://github.com/amfe/lib-flexible</a><br>postcss-px2rem: <a href=\"https://github.com/cuth/postcss-pxtorem\">https://github.com/cuth/postcss-pxtorem</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const &#123; override, addPostcssPlugins&#125; &#x3D; require(&#39;customize-cra&#39;)\n\nmodule.exports &#x3D; &#123;\n  addPostcssPlugins([require(&#39;postcss-pxtorem&#39;)(&#123; rootValue: 75, propList: [&#39;*&#39;], minPixelValue: 2, selectorBlackList: [&#39;am-&#39;] &#125;)]),\n&#125;</code></pre>\n\n<h2 id=\"9、解决跨域问题\"><a href=\"#9、解决跨域问题\" class=\"headerlink\" title=\"9、解决跨域问题\"></a>9、解决跨域问题</h2><p>1、yarn add http-proxy-middleware -D<br>2、在 src 目录下创建 setupProxy.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; setupProxy.js\nconst &#123; createProxyMiddleware &#125; &#x3D; require(&#39;http-proxy-middleware&#39;);\n\nmodule.exports &#x3D; function(app) &#123;\n  app.use(createProxyMiddleware(&#39;&#x2F;api&#39;, &#123;\n    target: &#39;http:&#x2F;&#x2F;localhost:3000&#39;,\n    changeOrigin: true,\n    pathRewrite: &#123;\n      &#39;^&#x2F;api&#39;: &#39;&#39;\n    &#125;\n  &#125;))\n&#125;\n</code></pre>\n\n<h1 id=\"二、使用-craco-来覆盖配置\"><a href=\"#二、使用-craco-来覆盖配置\" class=\"headerlink\" title=\"二、使用 craco 来覆盖配置\"></a>二、使用 craco 来覆盖配置</h1><p><a href=\"https://github.com/gsoft-inc/craco\">craco</a><br><a href=\"https://github.com/DocSpring/craco-antd\">craco-antd</a></p>\n<p>1、安装依赖</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yarn add @craco&#x2F;craco -D\nyarn add antd craco-antd -S\nyarn add craco-less @babel&#x2F;plugin-proposal-decorators babel-plugin-import -D\nyarn add compression-webpack-plugin -D &#x2F;&#x2F;打包 build 生成 gizp 压缩文件\nyarn add webpack-bundle-analyzer -D &#x2F;&#x2F;分析打包后的文件体积,生产版本关闭此项\nyarn add simple-progress-webpack-plugin -D &#x2F;&#x2F;查看打包的进度,生产版本关闭此项</code></pre>\n\n<p>2、修改 package.json 里的启动配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;scripts&quot;: &#123;\n-   &quot;start&quot;: &quot;react-scripts start&quot;,\n+   &quot;start&quot;: &quot;craco start&quot;,\n-   &quot;build&quot;: &quot;react-scripts build&quot;,\n+   &quot;build&quot;: &quot;craco build&quot;,\n-   &quot;test&quot;: &quot;react-scripts test&quot;,\n+   &quot;test&quot;: &quot;craco test&quot;,\n&#125;</code></pre>\n\n<p>3、在项目根目录新建 craco.config.js 文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * TODO: 区分环境 —— NODE_ENV\n * - whenDev process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;development&#39;\n * - whenTest process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;test&#39;\n * - whenProd process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;\n *&#x2F;\n\nconst &#123; when, whenDev, whenProd, whenTest, ESLINT_MODES, POSTCSS_MODES &#125; &#x3D; require(&#39;@craco&#x2F;craco&#39;)\nconst webpack &#x3D; require(&#39;webpack&#39;)\nconst CracoLessPlugin &#x3D; require(&#39;craco-less&#39;)\nconst CracoAntDesignPlugin &#x3D; require(&#39;craco-antd&#39;)\nconst CracoVtkPlugin &#x3D; require(&#39;craco-vtk&#39;)\nconst WebpackBar &#x3D; require(&#39;webpackbar&#39;)\nconst CircularDependencyPlugin &#x3D; require(&#39;circular-dependency-plugin&#39;)\nconst FastRefreshCracoPlugin &#x3D; require(&#39;craco-fast-refresh&#39;)\nconst TerserPlugin &#x3D; require(&#39;terser-webpack-plugin&#39;)\nconst AntdDayjsWebpackPlugin &#x3D; require(&#39;antd-dayjs-webpack-plugin&#39;)\nconst UglifyJsPlugin &#x3D; require(&#39;uglifyjs-webpack-plugin&#39;);\nconst CompressionWebpackPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;)\nconst &#123; BundleAnalyzerPlugin &#125; &#x3D; require(&quot;webpack-bundle-analyzer&quot;)\nconst SimpleProgressWebpackPlugin &#x3D; require( &#39;simple-progress-webpack-plugin&#39; )\nconst DashboardPlugin &#x3D; require(&#39;webpack-dashboard&#x2F;plugin&#39;)\nconst path &#x3D; require(&#39;path&#39;)\n\nconst isBuildAnalyzer &#x3D; process.env.BUILD_ANALYZER &#x3D;&#x3D;&#x3D; &#39;true&#39;\n\nconst pathResolve &#x3D; pathUrl &#x3D;&gt; path.join(__dirname, pathUrl)\n\nmodule.exports &#x3D; &#123;\n  webpack: &#123;\n    &#x2F;&#x2F; 别名\n    alias: &#123;\n      &quot;@&quot;: path.resolve(&quot;src&quot;),\n    &#125;,\n    plugins: [\n      &#x2F;&#x2F; webpack构建进度条\n      new WebpackBar(&#123;\n        profile: true\n      &#125;),\n      &#x2F;&#x2F; 打包忽略console,debugger\n      new UglifyJsPlugin(&#123;\n        uglifyOptions: &#123;\n          compress: &#123;\n            warnings: false,\n            drop_debugger: true,\n            drop_console: true,\n          &#125;,\n        &#125;,\n        sourceMap: false,\n        parallel: true,\n      &#125;),\n      &#x2F;&#x2F; GIZP\n      new CompressionWebpackPlugin(&#123;\n        algorithm: &#39;gzip&#39;,\n        test: new RegExp(&#39;\\\\.(&#39; + [&#39;js&#39;, &#39;css&#39;].join(&#39;|&#39;) + &#39;)$&#39;),\n        threshold: 1024,\n        minRatio: 0.8\n      &#125;),\n      new webpack.IgnorePlugin(&#x2F;^\\.\\&#x2F;locale$&#x2F;, &#x2F;moment$&#x2F;),\n      &#x2F;&#x2F; 时间转换工具采取day替换moment\n      new AntdDayjsWebpackPlugin(),\n      &#x2F;&#x2F; 新增模块循环依赖检测插件\n      ...whenDev(\n        () &#x3D;&gt; [\n          new CircularDependencyPlugin(&#123;\n            exclude: &#x2F;node_modules&#x2F;,\n            include: &#x2F;src&#x2F;,\n            failOnError: true,\n            allowAsyncCycles: false,\n            cwd: process.cwd()\n          &#125;),\n          &#x2F;&#x2F; webpack-dev-server 强化插件\n          new DashboardPlugin(),\n          new webpack.HotModuleReplacementPlugin()\n        ], []\n      ),\n      &#x2F;&#x2F; 新增打包产物分析插件\n      ...whenProd(\n        isBuildAnalyzer, () &#x3D;&gt; [\n          new BundleAnalyzerPlugin(&#123;\n            analyzerMode: &#39;static&#39;, &#x2F;&#x2F; html 文件方式输出编译分析\n            openAnalyzer: false,\n            reportFilename: path.resolve(__dirname, &#96;analyzer&#x2F;index.html&#96;)\n          &#125;)\n        ], []\n      ),\n      &#x2F;&#x2F; 打包分析\n      &#x2F;&#x2F; new BundleAnalyzerPlugin(),\n      &#x2F;&#x2F; 查看打包的进度\n      new SimpleProgressWebpackPlugin(),\n    ],\n    &#x2F;&#x2F; 抽离公用模块\n    optimization: &#123;\n      splitChunks: &#123;\n        cacheGroups: &#123;\n          commons: &#123;\n            chunks: &#39;initial&#39;,\n            minChunks: 2,\n            maxInitialRequests: 5,\n            minSize: 0\n          &#125;,\n          vendor: &#123;\n            test: &#x2F;node_modules&#x2F;,\n            chunks: &#39;initial&#39;,\n            name: &#39;vendor&#39;,\n            priority: 10,\n            enforce: true\n          &#125;\n        &#125;\n      &#125;\n    &#125;\n  &#125;,\n  plugins: [\n    &#x2F;&#x2F; 配置主題\n    &#123;\n      plugin: CracoAntDesignPlugin,\n      options: &#123;\n        customizeTheme: &#123;\n          &quot;@primary-color&quot;: &quot;#1DA57A&quot;\n        &#125;,\n      &#125;,\n    &#125;,\n    &#x2F;&#x2F; less\n    &#123;\n      plugin: CracoLessPlugin,\n      options: &#123;\n        lessLoaderOptions: &#123;\n          lessOptions: &#123;\n            modifyVars: &#123; &quot;@primary-color&quot;: &quot;#1DA57A&quot; &#125;,\n            javascriptEnabled: true\n          &#125;\n        &#125;\n      &#125;\n    &#125;\n  ],\n  babel: &#123;\n    plugins: [\n      [&#39;import&#39;, &#123; libraryName: &#39;antd&#39;, libraryDirectory: &#39;es&#39;, style: &#39;css&#39; &#125;],\n      [&#39;@babel&#x2F;plugin-proposal-decorators&#39;, &#123; legacy: true &#125;] &#x2F;&#x2F; 用来支持装饰器\n    ]\n  &#125;\n&#125;;</code></pre>\n","feature":true,"text":"在创建 react 项目时，我们一般用 create-react-app 脚手架来搭建项目，create-react-app 对 webpack 的配置进行了封装并默认隐藏了配置文件，当我们需要对 webpack 的配置进行扩展时，需要执行 npm run eject 命令将配置...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"React","slug":"React","count":3,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":3,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E4%BD%BF%E7%94%A8-react-app-rewired-customize-cra-%E7%BB%84%E5%90%88%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">一、使用 react-app-rewired + customize-cra 组合覆盖配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%89%E8%A3%85-react-app-rewired%E3%80%81customize-cra\"><span class=\"toc-text\">1、安装 react-app-rewired、customize-cra</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BF%AE%E6%94%B9-package-json-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2、修改 package.json 文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%9C%A8%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%96%B0%E5%BB%BA-config-overrides-js\"><span class=\"toc-text\">3、在项目根目录新建 config-overrides.js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%B7%BB%E5%8A%A0%E8%B7%AF%E5%BE%84%E5%88%AB%E5%90%8D%EF%BC%8C%E8%AE%BE%E7%BD%AE%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">4、添加路径别名，设置相对路径</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81antd-design-%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">5、antd-design 按需加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6%E3%80%81%E9%85%8D%E7%BD%AE-less\"><span class=\"toc-text\">6、配置 less</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E3%80%81%E4%BD%BF%E7%94%A8%E8%A3%85%E9%A5%B0%E5%99%A8\"><span class=\"toc-text\">7、使用装饰器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8%E3%80%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D\"><span class=\"toc-text\">8、移动端适配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9%E3%80%81%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">9、解决跨域问题</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8-craco-%E6%9D%A5%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">二、使用 craco 来覆盖配置</span></a></li></ol>","author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Typescript 教程","uid":"36ed985afabbf28dbf33794d7b5319fd","slug":"Typescript教程","date":"2020-08-26T14:36:20.000Z","updated":"2021-05-14T10:39:54.000Z","comments":true,"path":"api/articles/Typescript教程.json","keywords":null,"cover":"/assets/typescript.jpg","text":"TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。TypeScript 可以在任何浏览器、任何计算机和任何操作系统上运行，并且是开源的。主要提供了类型系统和对 ES6 的支持，它由 Microsoft 开发，代码 开源于 GitH...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Typescript","slug":"Typescript","count":1,"path":"api/categories/Typescript.json"}],"tags":[{"name":"Typescript","slug":"Typescript","count":1,"path":"api/tags/Typescript.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}