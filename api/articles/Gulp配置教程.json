{"title":"Gulp 配置教程","uid":"bcecceec14c0a7497b90500561edea6c","slug":"Gulp配置教程","date":"2019-06-25T14:28:46.000Z","updated":"2021-05-14T10:43:47.389Z","comments":true,"path":"api/articles/Gulp配置教程.json","keywords":null,"cover":"/assets/gulp.jpg","content":"<p>Gulp 是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。<br>Gulp 基于 Node.js 的前端构建工具，通过 Gulp 的插件可以实现前端代码的编译、检查、合并、压缩、格式化、浏览器自动刷新，还有许多强大的插件可以在<a href=\"https://gulpjs.com/plugins/\">这里查找</a>，也可以在 <a href=\"https://www.npmjs.com/\">npm</a> 里搜索查找需要的插件，比起 Grunt 不仅配置简单而且更容易阅读和维护。<br>英文：<a href=\"https://gulpjs.com/\">https://gulpjs.com/</a><br>中文：<a href=\"https://www.gulpjs.com.cn/docs/api/\">https://www.gulpjs.com.cn/docs/api/</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"全局安装-gulp\"><a href=\"#全局安装-gulp\" class=\"headerlink\" title=\"全局安装 gulp:\"></a>全局安装 gulp:</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">$ npm install --global gulp</code></pre>\n\n<h2 id=\"作为项目的开发依赖（devDependencies）安装：\"><a href=\"#作为项目的开发依赖（devDependencies）安装：\" class=\"headerlink\" title=\"作为项目的开发依赖（devDependencies）安装：\"></a>作为项目的开发依赖（devDependencies）安装：</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">$ npm install --save-dev gulp</code></pre>\n\n<h2 id=\"在项目根目录下创建一个名为-gulpfile-js-的文件\"><a href=\"#在项目根目录下创建一个名为-gulpfile-js-的文件\" class=\"headerlink\" title=\"在项目根目录下创建一个名为 gulpfile.js 的文件:\"></a>在项目根目录下创建一个名为 gulpfile.js 的文件:</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">&#x2F;&#x2F; 引入 gulp\nvar gulp &#x3D; require(&#39;gulp&#39;)\n\n&#x2F;&#x2F; 引入组件\nvar jslint &#x3D; require(&#39;gulp-jslint&#39;),\n  sass &#x3D; require(&#39;gulp-ruby-sass&#39;),\n  less &#x3D; require(&#39;gulp-less&#39;),\n  changed &#x3D; require(&#39;gulp-changed&#39;),\n  htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;),\n  minifyHTML &#x3D; require(&#39;gulp-minify-html&#39;),\n  minifycss &#x3D; require(&#39;gulp-minify-css&#39;),\n  autoprefixer &#x3D; require(&#39;gulp-autoprefixer&#39;),\n  concat &#x3D; require(&#39;gulp-concat&#39;),\n  uglify &#x3D; require(&#39;gulp-uglify&#39;),\n  base64 &#x3D; require(&#39;gulp-base64&#39;),\n  imagemin &#x3D; require(&#39;gulp-imagemin&#39;),\n  pngquant &#x3D; require(&#39;imagemin-pngquant&#39;),\n  clean &#x3D; require(&#39;gulp-clean&#39;),\n  rename &#x3D; require(&#39;gulp-rename&#39;),\n  notify &#x3D; require(&#39;gulp-notify&#39;),\n  livereload &#x3D; require(&#39;gulp-livereload&#39;),\n  cache &#x3D; require(&#39;gulp-cache&#39;),\n  del &#x3D; require(&#39;del&#39;),\n  rev &#x3D; require(&#39;gulp-rev&#39;),\n  revCollector &#x3D; require(&#39;gulp-rev-collector&#39;),\n  sourcemaps &#x3D; require(&#39;gulp-sourcemaps&#39;),\n  browserSync &#x3D; require(&#39;browser-sync&#39;).create()\n\nfunction errLog(error) &#123;\n  console.error.bind(console)\n  this.emit(&#39;end&#39;)\n&#125;\n\n&#x2F;&#x2F; jslint\ngulp.task(&#39;jslint&#39;, function () &#123;\n  gulp\n    .src(&#39;src&#x2F;js&#x2F;**&#x2F;*.js&#39;)\n    .pipe(jslint())\n    .pipe(jslint.reporter(&#39;default&#39;))\n    .pipe(notify(&#123; message: &#39;Jslint task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; autoprefixer\ngulp.task(&#39;autoprefixer&#39;, function () &#123;\n  gulp\n    .src(&#39;src&#x2F;css&#x2F;**&#x2F;*.css&#39;)\n    .pipe(\n      autoprefixer(&#123;\n        browsers: [&#39;last 2 versions&#39;, &#39;Android &gt;&#x3D; 4.0&#39;],\n        cascade: true,\n        remove: true,\n      &#125;)\n    )\n    .pipe(gulp.dest(&#39;dist&#x2F;css&#39;))\n    .pipe(notify(&#123; message: &#39;Autoprefixer task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; html\ngulp.task(&#39;html&#39;, function () &#123;\n  gulp\n    .src(&#39;src&#x2F;**&#x2F;*.html&#39;)\n    .pipe(htmlmin(&#123; collapseWhitespace: true &#125;))\n    .pipe(gulp.dest(&#39;dist&#39;))\n    .pipe(notify(&#123; message: &#39;HTML task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; js\ngulp.task(&#39;js&#39;, function () &#123;\n  gulp\n    .src(&#39;src&#x2F;js&#x2F;**&#x2F;*.js&#39;)\n    .pipe(sourcemaps.init())\n    .pipe(uglify())\n    .pipe(rev())\n    .pipe(gulp.dest(&#39;dist&#x2F;js&#39;))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest(&#39;rev&#x2F;js&#39;))\n    .pipe(notify(&#123; message: &#39;Js task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; css\ngulp.task(&#39;css&#39;, function () &#123;\n  gulp\n    .src(&#39;src&#x2F;css&#x2F;*.css&#39;)\n    .pipe(\n      autoprefixer(&#123;\n        browsers: [&#39;last 2 versions&#39;, &#39;Android &gt;&#x3D; 4.0&#39;],\n        cascade: true,\n        remove: true,\n      &#125;)\n    )\n    .pipe(base64())\n    .pipe(minifycss())\n    .pipe(rev())\n    .on(&#39;error&#39;, errLog)\n    .pipe(gulp.dest(&#39;dist&#x2F;css&#39;))\n    .pipe(rev.manifest())\n    .pipe(gulp.dest(&#39;rev&#x2F;css&#39;))\n    .pipe(notify(&#123; message: &#39;Styles task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; rev\ngulp.task(&#39;rev&#39;, function () &#123;\n  return gulp\n    .src([&#39;rev&#x2F;**&#x2F;*.json&#39;, &#39;src&#x2F;**&#x2F;*.html&#39;])\n    .pipe(\n      revCollector(&#123;\n        replaceReved: true,\n        dirReplacements: &#123;\n          css: &#39;css&#39;,\n          js: &#39;js&#39;,\n          &#39;cdn&#x2F;&#39;: function (manifest_value) &#123;\n            return &#39;&#x2F;&#x2F;cdn&#39; + (Math.floor(Math.random() * 9) + 1) + &#39;.&#39; + &#39;exsample.dot&#39; + &#39;&#x2F;images&#x2F;&#39; + manifest_value\n          &#125;,\n        &#125;,\n      &#125;)\n    )\n    .pipe(\n      minifyHTML(&#123;\n        empty: true,\n        pare: true,\n      &#125;)\n    )\n    .pipe(gulp.dest(&#39;dist&#39;))\n    .pipe(notify(&#123; message: &#39;Rev task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; sass\ngulp.task(&#39;sass&#39;, () &#x3D;&gt;\n  sass(&#39;src&#x2F;scss&#x2F;*.scss&#39;, &#123; style: &#39;compressed&#39; &#125;)\n    .pipe(\n      autoprefixer(&#123;\n        browsers: [&#39;last 2 versions&#39;, &#39;Android &gt;&#x3D; 4.0&#39;],\n        cascade: true,\n        remove: true,\n      &#125;)\n    )\n    .pipe(base64())\n    .pipe(minifycss())\n    .on(&#39;error&#39;, errLog)\n    .pipe(gulp.dest(&#39;dist&#x2F;css&#39;))\n    .pipe(notify(&#123; message: &#39;Sass task complete&#39; &#125;))\n)\n\n&#x2F;&#x2F; less\ngulp.task(&#39;less&#39;, function () &#123;\n  return gulp\n    .src(&#39;.&#x2F;src&#x2F;less&#x2F;**&#x2F;*.less&#39;)\n    .pipe(less())\n    .pipe(\n      autoprefixer(&#123;\n        browsers: [&#39;last 2 versions&#39;, &#39;Android &gt;&#x3D; 4.0&#39;],\n        cascade: true,\n        remove: true,\n      &#125;)\n    )\n    .pipe(base64())\n    .pipe(minifycss())\n    .on(&#39;error&#39;, errLog)\n    .pipe(gulp.dest(&#39;dist&#x2F;css&#39;))\n    .pipe(notify(&#123; message: &#39;Less task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; images\ngulp.task(&#39;images&#39;, function () &#123;\n  gulp\n    .src(&#39;src&#x2F;images&#x2F;**&#x2F;*&#39;)\n    .pipe(\n      cache(\n        imagemin(&#123;\n          optimizationLevel: 5,\n          progressive: true,\n          interlaced: true,\n          svgoPlugins: [&#123; removeViewBox: false &#125;],\n          use: [pngquant()],\n        &#125;)\n      )\n    )\n    .pipe(gulp.dest(&#39;dist&#x2F;images&#39;))\n    .pipe(notify(&#123; message: &#39;Images task complete&#39; &#125;))\n&#125;)\n\n&#x2F;&#x2F; clean\ngulp.task(&#39;clean&#39;, function () &#123;\n  del([&#39;.&#x2F;dist&#39;, &#39;.&#x2F;rev&#39;])\n&#125;)\n\n&#x2F;&#x2F; default\ngulp.task(&#39;default&#39;, function () &#123;\n  gulp.start(&#39;html&#39;, &#39;css&#39;, &#39;sass&#39;, &#39;less&#39;, &#39;js&#39;, &#39;images&#39;)\n&#125;)\n\n&#x2F;&#x2F; watch\ngulp.task(&#39;watch&#39;, function () &#123;\n  &#x2F;&#x2F; browserSync\n  browserSync.init(&#123;\n    server: &#123;\n      baseDir: &#39;.&#x2F;dist&#39;,\n      index: &#39;index.html&#39;,\n    &#125;,\n    open: &#39;external&#39;,\n    injectChanges: true,\n  &#125;)\n\n  gulp.watch(&#39;src&#x2F;css&#x2F;**&#x2F;*.css&#39;, [&#39;css&#39;])\n  gulp.watch(&#39;src&#x2F;scss&#x2F;**&#x2F;*.scss&#39;, [&#39;sass&#39;])\n  gulp.watch(&#39;src&#x2F;less&#x2F;**&#x2F;*.less&#39;, [&#39;less&#39;])\n  gulp.watch(&#39;src&#x2F;js&#x2F;**&#x2F;*.js&#39;, [&#39;js&#39;])\n  gulp.watch(&#39;src&#x2F;images&#x2F;**&#x2F;*&#39;, [&#39;images&#39;])\n  gulp.watch(&#39;src&#x2F;**&#x2F;*.html&#39;, [&#39;rev&#39;])\n  gulp.watch([&#39;dist&#x2F;**&#39;]).on(&#39;change&#39;, browserSync.reload)\n&#125;)</code></pre>\n\n<h2 id=\"运行-gulp\"><a href=\"#运行-gulp\" class=\"headerlink\" title=\"运行 gulp:\"></a>运行 gulp:</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">npm install   &#x2F;&#x2F;安装插件\n\n&#x2F;&#x2F;gulp 命令\ngulp-clean    &#x2F;&#x2F;清除\ngulp-watch    &#x2F;&#x2F;监听文件\ngulp-default  &#x2F;&#x2F;压缩</code></pre>\n\n<h2 id=\"gulp-常用插件\"><a href=\"#gulp-常用插件\" class=\"headerlink\" title=\"gulp 常用插件\"></a>gulp 常用插件</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var gulp &#x3D; require(&#39;gulp&#39;); &#x2F;&#x2F;gulp\nvar jshint &#x3D; require(&#39;gulp-jshint&#39;); &#x2F;&#x2F; 引入检测js文件模块\nvar uglify &#x3D; require(&#39;gulp-uglify&#39;); &#x2F;&#x2F; 引入js压缩模块\nvar concat &#x3D; require(&#39;gulp-concat&#39;); &#x2F;&#x2F; 引入合并文件模块\nvar sourcemaps &#x3D; require(&#39;gulp-sourcemaps&#39;); &#x2F;&#x2F; 引入sourcemaps\nvar htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;); &#x2F;&#x2F; 引入html压缩模块\nvar cleanCSS &#x3D; require(&#39;gulp-clean-css&#39;); &#x2F;&#x2F; 引入压缩css的模块\nvar imagemin &#x3D; require(&#39;gulp-imagemin&#39;); &#x2F;&#x2F; 引入压缩图片插件\nvar postcss &#x3D; require(&#39;gulp-postcss&#39;); &#x2F;&#x2F;JavaScript 代码来转换CSS 中的样式\nvar autoprefixer &#x3D; require(&#39;autoprefixer&#39;); &#x2F;&#x2F;自动加上浏览器前缀\nvar postcsswritesvg &#x3D; require(&#39;postcss-write-svg&#39;); &#x2F;&#x2F; 解决1px方案\nvar browserSync &#x3D; require(&#39;browser-sync&#39;); &#x2F;&#x2F;默认浏览器打开\nvar cache &#x3D; require(&#39;gulp-cache&#39;); &#x2F;&#x2F;缓存\nvar opn &#x3D; require(&#39;opn&#39;); &#x2F;&#x2F;静态服务器\nvar autoprefixer &#x3D; require(&#39;gulp-autoprefixer&#39;); &#x2F;&#x2F;根据设置浏览器版本自动处理浏览器前缀\nvar concat &#x3D; require(&#39;gulp-concat&#39;); &#x2F;&#x2F;合并javascript文件，减少网络请求\nvar base64 &#x3D; require(&#39;gulp-base64&#39;); &#x2F;&#x2F;图片转换成Base64编码\nvar sass &#x3D; require(&#39;gulp-ruby-sass&#39;); &#x2F;&#x2F;sass\nvar less &#x3D; require(&#39;gulp-less&#39;); &#x2F;&#x2F;less\nvar rename &#x3D; require(&#39;gulp-rename&#39;); &#x2F;&#x2F;重命名\nvar notify &#x3D; require(&#39;gulp-notify&#39;); &#x2F;&#x2F;提示\nvar livereload &#x3D; require(&#39;gulp-livereload&#39;); &#x2F;&#x2F;监听文件发生变化时,浏览器自动刷新页面\nvar rev &#x3D; require(&#39;gulp-rev&#39;); 根据静态资源内容，生成md5签名，打包出来的文件名会加上md5签名，同时生成一个json用来保存文件名路径对应关系\nvar revCollector &#x3D; require(&#39;gulp-rev-collector&#39;);\nvar changed &#x3D; require(&#39;gulp-changed&#39;); &#x2F;&#x2F;用来过滤未被修改过的文件，只有修改后的文件才能通过管道。这样做的好处时，只处理修改后的文件，减少后续程序的执行时间。\nvar clean &#x3D; require(&#39;gulp-clean&#39;); &#x2F;&#x2F;删除文件及文件夹，在执行打包的时候，一般都需要先清理目标文件夹，以保证每次打包时，都是最新的文件</code></pre>\n","text":"Gulp 是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。Gulp 基于 Node.js 的前端构建工具，通过 G...","link":"","photos":[],"count_time":{"symbolsCount":"9.5k","symbolsTime":"9 mins."},"categories":[{"name":"Gulp","slug":"Gulp","count":1,"path":"api/categories/Gulp.json"}],"tags":[{"name":"Gulp","slug":"Gulp","count":1,"path":"api/tags/Gulp.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85-gulp\"><span class=\"toc-text\">全局安装 gulp:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91%E4%BE%9D%E8%B5%96%EF%BC%88devDependencies%EF%BC%89%E5%AE%89%E8%A3%85%EF%BC%9A\"><span class=\"toc-text\">作为项目的开发依赖（devDependencies）安装：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA-gulpfile-js-%E7%9A%84%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">在项目根目录下创建一个名为 gulpfile.js 的文件:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C-gulp\"><span class=\"toc-text\">运行 gulp:</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gulp-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">gulp 常用插件</span></a></li></ol>","author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Git 总结","uid":"bd0b4d58af50c3051be665f36056fa92","slug":"Git总结","date":"2019-07-11T15:37:45.000Z","updated":"2021-05-14T10:41:30.832Z","comments":true,"path":"api/articles/Git总结.json","keywords":null,"cover":"/assets/git.jpg","text":"在团队做过软件开发的，版本控制必是不可或缺的一项。目前，版本控制主要分为集中式版本控制系统和分布式版本控制系统 ，即大家熟知的 SVN 和 Git。Git 是当下最流行的分布式版本控制系统。 什么是版本控制版本控制（Revision control）是一种在开发的过程中用于管理我...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Web Storage - HTML5本地存储","uid":"6c8c7b5d1ee2282dcd4144a2e2072c08","slug":"Web Storage - HTML5本地存储","date":"2019-06-06T02:11:34.000Z","updated":"2021-05-14T10:42:52.639Z","comments":true,"path":"api/articles/Web Storage - HTML5本地存储.json","keywords":null,"cover":"/assets/web-storage.jpg","text":"Web Storage 是 HTML5 引入的一个非常重要的功能，在前端开发中经常用到，可以在客户端本地存储数据，类似 HTML4 的 cookie，但可实现功能要比 cookie 强大的多，cookie 大小被限制在 4KB，Web Storage 官方建议为每个网站 5MB。...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Web Storage","slug":"Web-Storage","count":1,"path":"api/categories/Web-Storage.json"}],"tags":[{"name":"Web Storage","slug":"Web-Storage","count":1,"path":"api/tags/Web-Storage.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}