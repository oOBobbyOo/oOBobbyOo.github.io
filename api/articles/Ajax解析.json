{"title":"Ajax解析","uid":"58c3765b4ca8e3bdf0eac83cf4cb3ffa","slug":"Ajax解析","date":"2018-05-11T11:56:04.000Z","updated":"2021-05-14T06:03:43.524Z","comments":true,"path":"api/articles/Ajax解析.json","keywords":null,"cover":"/assets/ajax.jpg","content":"<p>AJAX 即“Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。Ajax 不是一种新的编程语言，而是使用现有标准的新方法。AJAX 可以在不重新加载整个页面的情况下，与服务器交换数据。这种异步交互的方式，使用户单击后，不必刷新页面也能获取新数据。使用 Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的 Web 用户界面。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Ajax-中的对象和方法说明\"><a href=\"#Ajax-中的对象和方法说明\" class=\"headerlink\" title=\"Ajax 中的对象和方法说明\"></a>Ajax 中的对象和方法说明</h2><p>Ajax 的核心对象就是 xmlHttpRequest,用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>\n<h3 id=\"1-方法\"><a href=\"#1-方法\" class=\"headerlink\" title=\"1.方法\"></a>1.方法</h3><p>xmlHttpRequst 对象利用 send()和 open()方法与服务器进行交互。<br>open(method,url,async)<br>　　 method：请求的类型；GET 或 POST<br>　　 url：文件在服务器上的位置<br>　　 async：true（异步）或 false（同步）<br>send(string)<br>　　 string：仅用于 POST 请求<br>如果是 post 请求，必须使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中设置发送的数据：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">xmlhttp.open(&#39;POST&#39;, &#39;test.php&#39;, true)\nxmlhttp.setRequestHeader(&#39;Content-type&#39;, &#39;application&#x2F;x-www-form-urlencoded&#39;)\nxmlhttp.send(&#39;fname&#x3D;Bill&amp;lname&#x3D;Gates&#39;)</code></pre>\n\n<h3 id=\"2-属性\"><a href=\"#2-属性\" class=\"headerlink\" title=\"2.属性\"></a>2.属性</h3><p>readyState<br>　　 0: 请求未初始化<br>　　 1: 服务器连接已建立<br>　　 2: 请求已接收<br>　　 3: 请求处理中<br>　　 4: 请求已完成，且响应已就绪<br>State<br>　　 200: “OK”<br>　　 404: 未找到页面<br>responseText<br>　　获得字符串形式的响应数据。<br>responseXML<br>　　获得 XML 形式的响应数据。<br>onreadystatechange<br>　　存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</p>\n<h3 id=\"3-运行原理\"><a href=\"#3-运行原理\" class=\"headerlink\" title=\"3.运行原理\"></a>3.运行原理</h3><p>ajax 通过 xmlhttpRequest 对象执行操作，其中 xmlhttpRequest 对象是在浏览器中内置的一个对象，其运行原理就相当于创建了一个请求代理，通过代理去完成与服务器的交互，交互的过程中客户不需要等待，还可以进行其它的工作，交互完成以后，代理再将交互的结果返回给客户页面。</p>\n<p>第一步：创建 xmlHttpRequest 对象，每个浏览器的创建不是都相同。<br>　　　　常情况下为了兼容所有浏览器，每个都要写上。<br>第二步：设置 open()方法和 setRequestHeader()方法参数。<br>　　　　将请求方式，请求目的地址，和请求类型设置到 open 方法中，如果是 post 请求，则需要设置 setRequestHeader()参数<br>第三步：发送执行<br>　　　　利用 send 方法，与服务器真正的交互执行<br>第四步：获得执行结果<br>　　　　首先判断执行是否完成，然后通过 js 操作 dom 元素，将返回的 responseText 返回到页面</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">var xmlHttp &#x2F;&#x2F;声明xmlHttp对象\n&#x2F;&#x2F;实例化xmlHttpRequest对象\nfunction createXMLHttpRequest() &#123;\n  if (window.XMLHttpRequest) &#123;\n    xmlHttp &#x3D; new XMLHttpRequest()\n  &#125; else if (window.ActiveXObject) &#123;\n    xmlHttp &#x3D; new ActiveXObject(&#39;Microsoft.XMLHTTP&#39;)\n  &#125;\n&#125;\n&#x2F;&#x2F;input失去焦点事件onblur()，调用这个js方法验证\nfunction validate(field) &#123;\n  if (trim(field.value).length !&#x3D; 0) &#123;\n    &#x2F;&#x2F;创建XMLHttpRequest\n    createXMLHttpRequest()\n    &#x2F;&#x2F;每次请求的url地址不同，利用时间产生不同url地址，可以防止缓冲造成问题\n    var url &#x3D; &#39;user_validate.php?userId&#x3D;&#39; + trim(field.value) + &#39;×tamp&#x3D;&#39; + new Date().getTime()\n    xmlHttp.open(&#39;GET&#39;, url, true)\n    &#x2F;&#x2F;方法地址，处理完成后自动调用，回调\n    xmlHttp.onreadystatechange &#x3D; function () &#123;\n      &#x2F;&#x2F;匿名函数\n      if (xmlHttp.readyState &#x3D;&#x3D; 4) &#123;\n        &#x2F;&#x2F;Ajax引擎初始化成功\n        if (xmlHttp.status &#x3D;&#x3D; 200) &#123;\n          &#x2F;&#x2F;http协议成功\n          document.getElementById(&#39;myDiv&#39;).innerHTML &#x3D; xmlhttp.responseText\n        &#125; else &#123;\n          alert(&#39;请求失败，错误码&#x3D;&#39; + xmlHttp.status)\n        &#125;\n      &#125;\n    &#125;\n    &#x2F;&#x2F;将参数发送到Ajax引擎\n    xmlHttp.send(null)\n  &#125; else &#123;\n    document.getElementById(&#39;myDiv&#39;).innerHTML &#x3D; &#39;&#39;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"ajax-方法详解\"><a href=\"#ajax-方法详解\" class=\"headerlink\" title=\"$.ajax()方法详解\"></a>$.ajax()方法详解</h3><p>1.url:<br>要求为 String 类型的参数，（默认为当前页地址）发送请求的地址。</p>\n<p>2.type:<br>要求为 String 类型的参数，请求方式（post 或 get）默认为 get。注意其他 http 请求方法，例如 put 和 delete 也可以使用，但仅部分浏览器支持。</p>\n<p>3.timeout:<br>要求为 Number 类型的参数，设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup()方法的全局设置。</p>\n<p>4.async:<br>要求为 Boolean 类型的参数，默认设置为 true，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其他操作必须等待请求完成才可以执行。</p>\n<p>5.cache:<br>要求为 Boolean 类型的参数，默认为 true（当 dataType 为 script 时，默认为 false），设置为 false 将不会从浏览器缓存中加载请求信息。</p>\n<p>6.data:<br>要求为 Object 或 String 类型的参数，发送到服务器的数据。如果已经不是字符串，将自动转换为字符串格式。get 请求中将附加在 url 后。防止这种自动转换，可以查看 processData 选项。<br>对象必须为 key/value 格式，例如{foo1:”bar1”,foo2:”bar2”}转换为&amp;foo1=bar1&amp;foo2=bar2。<br>如果是数组，JQuery 将自动为不同值对应同一个名称。例如{foo:[“bar1”,”bar2”]}转换为&amp;foo=bar1&amp;foo=bar2。</p>\n<p>7.dataType:<br>要求为 String 类型的参数，预期服务器返回的数据类型。如果不指定，JQuery 将自动根据 http 包 mime 信息返回 responseXML 或 responseText，并作为回调函数参数传递。可用的类型如下：<br>xml：返回 XML 文档，可用 JQuery 处理。<br>html：返回纯文本 HTML 信息；包含的 script 标签会在插入 DOM 时执行。<br>script：返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 cache 参数。注意在远程请求时（不在同一个域下），所有 post 请求都将转为 get 请求。<br>json：返回 JSON 数据。<br>jsonp：JSONP 格式。使用 SONP 形式调用函数时，例如 myurl?callback=?，JQuery 将自动替换后一个“?”为正确的函数名，以执行回调函数。<br>text：返回纯文本字符串。</p>\n<p>8.beforeSend：<br>要求为 Function 类型的参数，发送请求前可以修改 XMLHttpRequest 对象的函数，例如添加自定义 HTTP 头。在 beforeSend 中如果返回 false 可以取消本次 ajax 请求。XMLHttpRequest 对象是惟一的参数。<br>　　 function(XMLHttpRequest){<br>　　　　 this; //调用本次 ajax 请求时传递的 options 参数<br>　　}</p>\n<p>9.complete：<br>要求为 Function 类型的参数，请求完成后调用的回调函数（请求成功或失败时均调用）。参数：XMLHttpRequest 对象和一个描述成功请求类型的字符串。<br>　　 function(XMLHttpRequest, textStatus){<br>　　　　 this; //调用本次 ajax 请求时传递的 options 参数<br>　　}</p>\n<p>10.success：要求为 Function 类型的参数，请求成功后调用的回调函数，有两个参数。<br>　　(1)由服务器返回，并根据 dataType 参数进行处理后的数据。<br>　　(2)描述状态的字符串。<br>　　 function(data, textStatus){<br>　　　　//data 可能是 xmlDoc、jsonObj、html、text 等等<br>　　　　 this; //调用本次 ajax 请求时传递的 options 参数<br>　　}</p>\n<p>11.error:<br>要求为 Function 类型的参数，请求失败时被调用的函数。该函数有 3 个参数，即 XMLHttpRequest 对象、错误信息、捕获的错误对象(可选)。ajax 事件函数如下：<br>　　 function(XMLHttpRequest, textStatus, errorThrown){<br>　　　　//通常情况下 textStatus 和 errorThrown 只有其中一个包含信息<br>　　　　 this; //调用本次 ajax 请求时传递的 options 参数<br>　　}</p>\n<p>12.contentType：<br>要求为 String 类型的参数，当发送信息至服务器时，内容编码类型默认为”application/x-www-form-urlencoded”。该默认值适合大多数应用场合。</p>\n<p>13.dataFilter：<br>要求为 Function 类型的参数，给 Ajax 返回的原始数据进行预处理的函数。提供 data 和 type 两个参数。data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。<br>　　 function(data, type){<br>　　　　//返回处理后的数据<br>　　　　 return data;<br>　　}</p>\n<p>14.dataFilter：<br>要求为 Function 类型的参数，给 Ajax 返回的原始数据进行预处理的函数。提供 data 和 type 两个参数。data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。函数返回的值将由 jQuery 进一步处理。<br>　　 function(data, type){<br>　　　　//返回处理后的数据<br>　　　　 return data;<br>　　}</p>\n<p>15.global：<br>要求为 Boolean 类型的参数，默认为 true。表示是否触发全局 ajax 事件。设置为 false 将不会触发全局 ajax 事件，ajaxStart 或 ajaxStop 可用于控制各种 ajax 事件。</p>\n<p>16.ifModified：<br>要求为 Boolean 类型的参数，默认为 false。仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是 Last-Modified 头信息。默认值是 false，即忽略头信息。</p>\n<p>17.jsonp：<br>要求为 String 类型的参数，在一个 jsonp 请求中重写回调函数的名字。该值用来替代在”callback=?”这种 GET 或 POST 请求中 URL 参数里的”callback”部分，例如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。</p>\n<p>18.username：<br>要求为 String 类型的参数，用于响应 HTTP 访问认证请求的用户名。</p>\n<p>19.password：<br>要求为 String 类型的参数，用于响应 HTTP 访问认证请求的密码。</p>\n<p>20.processData：<br>要求为 Boolean 类型的参数，默认为 true。默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型”application/x-www-form-urlencoded”。如果要发送 DOM 树信息或者其他不希望转换的信息，请设置为 false。</p>\n<p>21.scriptCharset：<br>要求为 String 类型的参数，只有当请求时 dataType 为”jsonp”或者”script”，并且 type 是 GET 时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">1. jQuery.get(...)\n       所有参数：\n              url: 待载入页面的URL地址\n             data: 待发送 Key&#x2F;value 参数。\n          success: 载入成功时回调函数。\n         dataType: 返回内容格式，xml, json,  script, text, html\n\n2.jQuery.post(...)\n       所有参数：\n              url: 待载入页面的URL地址\n             data: 待发送 Key&#x2F;value 参数\n          success: 载入成功时回调函数\n         dataType: 返回内容格式，xml, json,  script, text, html\n\n3.jQuery.getJSON(...)\n       所有参数：\n              url: 待载入页面的URL地址\n             data: 待发送 Key&#x2F;value 参数。\n          success: 载入成功时回调函数。\n\n4.jQuery.getScript(...)\n       所有参数：\n              url: 待载入页面的URL地址\n             data: 待发送 Key&#x2F;value 参数。\n          success: 载入成功时回调函数。\n\n5.jQuery.ajax(...)\n       部分参数：\n              url：请求地址\n             type：请求方式，GET、POST（1.9.0之后用method）\n          headers：请求头\n             data：要发送的数据\n      contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)\n            async：是否异步\n          timeout：设置请求超时时间（毫秒）\n       beforeSend：发送请求前执行的函数(全局)\n         complete：完成之后执行的回调函数(全局)\n          success：成功之后执行的回调函数(全局)\n            error：失败之后执行的回调函数(全局)\n          accepts：通过请求头发送给服务器，告诉服务器当前客户端课接受的数据类型\n         dataType：将服务器端返回的数据转换成指定类型\n            &quot;xml&quot;: 将服务器端返回的内容转换成xml格式\n           &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式\n           &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。\n         &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式\n           &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象\n          &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</code></pre>\n","text":"AJAX 即“Asynchronous JavaScript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。Ajax 不是一种新的编程语言，而是使用现有标准的新方法。AJAX 可以在不重新加载整个页面的情况下，与服务器交换数...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"Ajax","slug":"Ajax","count":1,"path":"api/categories/Ajax.json"}],"tags":[{"name":"Ajax","slug":"Ajax","count":1,"path":"api/tags/Ajax.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Ajax-%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">Ajax 中的对象和方法说明</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">2.属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3.运行原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ajax-%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">$.ajax()方法详解</span></a></li></ol></li></ol>","author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JS判断浏览器类型总结","uid":"da5ae32f197a713b14ae5cac1efd5d4a","slug":"JS判断浏览器类型","date":"2018-05-13T12:13:15.000Z","updated":"2021-05-14T06:02:49.886Z","comments":true,"path":"api/articles/JS判断浏览器类型.json","keywords":null,"cover":"/assets/browser.jpg","text":"开发 APP 过程中，需要打包上线 APP。为了用户体验好，我们新增了一个静态下载页面。用户扫描二维码进入到我们的下载页面，但是很多情况是推送给客户，客户可能会在微信或者 QQ 中打开我们的下载页面，点击下载按钮时无法实现下载我们的 APP，所以需要对用户打开下载页面进行判断，下...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Browser","slug":"Browser","count":1,"path":"api/categories/Browser.json"}],"tags":[{"name":"Browser JS","slug":"Browser-JS","count":1,"path":"api/tags/Browser-JS.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Vim 常用快捷键","uid":"018a5cfaa025f44d4ca2309411ae5700","slug":"Vim 快捷键","date":"2018-04-15T06:20:33.000Z","updated":"2021-05-14T03:43:25.121Z","comments":true,"path":"api/articles/Vim 快捷键.json","keywords":null,"cover":"/assets/vim.png","text":"对 Vim 的大名早就如雷贯耳，更加如雷贯耳的是 Vim 在各种大神眼中的地位——coding 神器。对于新手 coding,工欲善其事必先利其器,这里本着最简单快速上手的原则给出一些最最有用的快捷键,通过这些就不觉得 vim 有多难用了。 基本操作 快捷键 功能 Esc 从当前...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Vim","slug":"Vim","count":1,"path":"api/categories/Vim.json"}],"tags":[{"name":"Vim","slug":"Vim","count":1,"path":"api/tags/Vim.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}