{"title":"Git 总结","uid":"bd0b4d58af50c3051be665f36056fa92","slug":"Git总结","date":"2018-07-11T15:37:45.000Z","updated":"2021-05-14T03:41:59.276Z","comments":true,"path":"api/articles/Git总结.json","keywords":null,"cover":"/assets/git.jpg","content":"<p>在团队做过软件开发的，版本控制必是不可或缺的一项。目前，版本控制主要分为集中式版本控制系统和分布式版本控制系统 ，即大家熟知的 SVN 和 Git。Git 是当下最流行的分布式版本控制系统。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么是版本控制\"><a href=\"#什么是版本控制\" class=\"headerlink\" title=\"什么是版本控制\"></a>什么是版本控制</h2><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>\n<ul>\n<li>实现跨区域多人协同开发</li>\n<li>追踪和记载一个或者多个文件的历史记录</li>\n<li>组织和保护你的源代码和文档</li>\n<li>统计工作量</li>\n<li>并行开发、提高开发效率</li>\n<li>跟踪记录整个软件的开发过程</li>\n<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>\n</ul>\n<p>简单说就是用于管理多人协同开发项目的技术。</p>\n<h2 id=\"常用术语\"><a href=\"#常用术语\" class=\"headerlink\" title=\"常用术语\"></a>常用术语</h2><p>1)、仓库（Repository）<br>受版本控制的所有文件修订历史的共享数据库</p>\n<p>2)、工作空间（Workspace)<br>本地硬盘或 Unix 用户帐户上编辑的文件副本</p>\n<p>3)、工作树/区（Working tree）<br>工作区中包含了仓库的工作文件。您可以修改的内容和提交更改作为新的提交到仓库。</p>\n<p>4)、暂存区（Staging area）<br>暂存区是工作区用来提交更改（commit）前可以暂存工作区的变化。</p>\n<p><img src=\"/assets/git%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png\" alt=\"git提交流程\"></p>\n<p>5)、索引（Index）<br>索引是暂存区的另一种术语。</p>\n<p>6)、签入（Checkin）<br>将新版本复制回仓库</p>\n<p>7)、签出（Checkout）<br>从仓库中将文件的最新修订版本复制到工作空间</p>\n<p>8)、提交（Commit）<br>对各自文件的工作副本做了更改，并将这些更改提交到仓库</p>\n<p>9)、冲突（Conflict）<br>多人对同一文件的工作副本进行更改，并将这些更改提交到仓库</p>\n<p>10)、合并（Merge）<br>将某分支上的更改联接到此主干或同为主干的另一个分支</p>\n<p>11)、分支（Branch）<br>从主线上分离开的副本，默认分支叫 master</p>\n<p>12)、锁（Lock）<br>获得修改文件的专有权限。</p>\n<p>13)、头（HEAD）<br>头是一个象征性的参考，最常用以指向当前选择的分支。</p>\n<p>14)、修订（Revision）<br>表示代码的一个版本状态。Git 通过用 SHA1 hash 算法表示的 ID 来标识不同的版本。</p>\n<p>15)、标记（Tags）<br>标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。</p>\n<h2 id=\"什么是-Git\"><a href=\"#什么是-Git\" class=\"headerlink\" title=\"什么是 Git\"></a>什么是 Git</h2><p>Git 是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li>适合分布式开发，强调个体。</li>\n<li>公共服务器压力和数据量都不会太大。</li>\n<li>速度快、灵活。</li>\n<li>任意两个开发者之间可以很容易的解决冲突。</li>\n<li>离线工作。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li>模式上比 SVN 更加复杂。</li>\n<li>不符合常规思维。</li>\n<li>代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</li>\n</ul>\n<h2 id=\"git-命令图解\"><a href=\"#git-命令图解\" class=\"headerlink\" title=\"git 命令图解\"></a>git 命令图解</h2><p><img src=\"/assets/git-command.png\" alt=\"git命令\"></p>\n<ul>\n<li>Workspace：工作区</li>\n<li>Index / Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n<h2 id=\"git-命令大全\"><a href=\"#git-命令大全\" class=\"headerlink\" title=\"git 命令大全\"></a>git 命令大全</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">git init                                                  # 初始化本地git仓库（创建新仓库）\ngit config --global user.name &quot;xxx&quot;                       # 配置用户名\ngit config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --global --unset http.proxy                    # remove  proxy configuration on git\ngit clone git+ssh:&#x2F;&#x2F;git@192.168.53.168&#x2F;VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m &#39;xxx&#39;                                       # 提交\ngit commit --amend -m &#39;xxx&#39;                               # 合并上一次提交（用于反复修改）\ngit commit -am &#39;xxx&#39;                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m &#39;xxx&#39;                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- .&#x2F;lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin&#x2F;master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin&#x2F;master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh:&#x2F;&#x2F;git@192.168.53.168&#x2F;VT.git # 增加远程定义（用于push&#x2F;pull&#x2F;fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features&#x2F;performance                         # 检出已存在的features&#x2F;performance分支\ngit checkout --track hotfixes&#x2F;BJVEP933                    # 检出远程分支hotfixes&#x2F;BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin&#x2F;develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit merge origin&#x2F;master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes&#x2F;BJVEP933                        # 删除远程仓库的hotfixes&#x2F;BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes&#x2F;BJVEP933                           # 删除分支hotfixes&#x2F;BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes&#x2F;BJVEP933                           # 强制删除分支hotfixes&#x2F;BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@&#123;5&#125;\ngit show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态\ngit log --pretty&#x3D;format:&#39;%h %s&#39; --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty&#x3D;raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@&#123;0&#125;                               # 参考第一次暂存\ngit stash apply stash@&#123;0&#125;                                 # 应用第一次暂存\ngit grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”\ngit grep -e &#39;#define&#39; --and -e SORT_DIRENT\ngit gc\ngit fsck</code></pre>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://gist.github.com/guweigang/9848271\" title=\"git命令\">git 命令大全</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" title=\"git命令\">阮一峰老师的常用 Git 命令清单</a></p>\n","text":"在团队做过软件开发的，版本控制必是不可或缺的一项。目前，版本控制主要分为集中式版本控制系统和分布式版本控制系统 ，即大家熟知的 SVN 和 Git。Git 是当下最流行的分布式版本控制系统。 什么是版本控制版本控制（Revision control）是一种在开发的过程中用于管理我...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">什么是版本控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">常用术语</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-Git\"><span class=\"toc-text\">什么是 Git</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">优点：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">缺点：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#git-%E5%91%BD%E4%BB%A4%E5%9B%BE%E8%A7%A3\"><span class=\"toc-text\">git 命令图解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#git-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8\"><span class=\"toc-text\">git 命令大全</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"详解JS遍历","uid":"9f17109abe732a77d87a2b0d4189145c","slug":"详解JS遍历","date":"2018-07-20T14:19:44.000Z","updated":"2021-05-14T03:41:16.532Z","comments":true,"path":"api/articles/详解JS遍历.json","keywords":null,"cover":"/assets/js.jpg","text":"遍历数组或对象是一名程序员的基本素养之一，然而遍历却不是一件简单的事，优秀的程序员知道怎么去选择合适的遍历方法，优化遍历效率。本篇将带你走进 JavaScript 遍历的世界，享受分析 JS 循环的快感。本篇所有代码都可以直接运行，希望您通读本篇后，不止是浏览， 最好是亲手去实践...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"JS","slug":"JS","count":3,"path":"api/categories/JS.json"}],"tags":[{"name":"JS","slug":"JS","count":3,"path":"api/tags/JS.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"常用的javaScript正则表达式","uid":"bfff9943662c3aacf871abc5e37a1cbd","slug":"常用的JS正则表达式","date":"2018-06-27T11:30:16.000Z","updated":"2021-05-14T06:03:59.945Z","comments":true,"path":"api/articles/常用的JS正则表达式.json","keywords":null,"cover":"/assets/regex.jpg","text":"常用的 javaScript 正则表达式 常用的 javaScript 正则表达式，其中包括用户名、密码强度、电子邮件地址（Email）、手机号码、身份证号、URL 地址、 IPv4 地址、 十六进制颜色、 日期、 整数、数字、QQ 号码、 微信号、车牌号、中文正则。 用户名正则...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"Regex","slug":"Regex","count":1,"path":"api/categories/Regex.json"}],"tags":[{"name":"Regex","slug":"Regex","count":1,"path":"api/tags/Regex.json"}],"author":{"name":"Bobby's Blog","slug":"blog-author","avatar":"/assets/user/bobby.jpg","link":"/","description":"欢迎来到我的博客 <br /> (σﾟ∀ﾟ)σ..:*☆哎哟不错哦","socials":{"github":"https://github.com/oOBobbyOo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}